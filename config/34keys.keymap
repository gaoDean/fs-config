#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "34keys.h"

&sk {
  release-after-ms = <STICKY_KEY_TIMEOUT>;
};

&caps_word {
  continue-list = <UNDERSCORE MINUS BACKSPACE>;
};

&kscan0 {
  debounce-period = <14>;
};

/ {

  combos {
    #include "combos.dtsi"
  };

  macros {
   #include "macros.dtsi"
  };

  behaviors {

    skq: sticky_key_quick_release {
      compatible = "zmk,behavior-sticky-key";
      label = "STICKY_KEY_QUICK_RELEASE";
      #binding-cells = <1>;
      bindings = <&kp>;
      quick-release;
      release-after-ms = <STICKY_KEY_TIMEOUT>;
    };

    // Sticky key on tap, normal key on hold
    // Useful for modifier-clicking without the modifier remaining active
    nk: not_so_sticky_key {
      compatible = "zmk,behavior-hold-tap";
      label = "NOT_SO_STICKY_KEY";
      #binding-cells = <2>;
      tapping_term_ms = <200>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&sk>;
    };

    // A hold-tap that activates without delay (like `&mo`)
    mo_tap: mo_with_tap {
      compatible = "zmk,behavior-hold-tap";
      label = "MO_WITH_TAP";
      #binding-cells = <2>;
      tapping_term_ms = <0>;
      retro-tap;
      flavor = "hold-preferred";
      bindings = <&mo>, <&kp>;
    };

    kr_to: key_repeat_to_layer {
        compatible = "zmk,behavior-hold-tap";
        label = "KEY_REPEAT_TO_LAYER";
        #binding-cells = <2>;
        tapping_term_ms = <200>;
        bindings = <&mo>, <&key_repeat>;
    };

    if_shift: if_shift_bksp_dw {
        compatible = "zmk,behavior-mod-morph";
        label = "IF_SHIFT_BKSP_DW";
        #binding-cells = <0>;
        bindings = <&kp BKSP>, <&macro_dw>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    dw_bksp: delete_word_backspace {
        compatible = "zmk,behavior-hold-tap";
        label = "DELETE_WORD_BACKSPACE";
        #binding-cells = <2>;
        tapping_term_ms = <200>;
        bindings = <&kp>, <&if_shift>;
    };

    if_lctrl: if_lctrl {
        compatible = "zmk,behavior-mod-morph";
        label = "IF_LCTRL";
        #binding-cells = <0>;
        bindings = <&to BASE>, <&kp 0>;
        mods = <(MOD_LCTL)>;
    }
  };

  keymap {
    compatible = "zmk,keymap";

    base_layer {
      label = "HXY";
      bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
        &kp Y         &kp C         &kp L         &kp M         &kp K             &kp J         &kp F         &kp U         &kp DOT       &kp SEMICOLON
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &kp I         &kp S         &kp R         &kp T         &kp G             &kp P         &kp N         &kp E         &kp A         &kp O
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &kp Q         &kp V         &kp W         &kp D         &kp Z             &kp B         &kp H         &kp COMMA    &kp SLASH      &kp X
// ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                &kr_to NAV 0    &skq LSHIFT       &dw_bksp LCTRL 0      &kp SPACE
//                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
      >;
    };

    nav_layer {
      label = "NAV";
      bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
        XXX           XXX           XXX           XXX           XXX               &kp TAB       &kp KP_N7      &kp KP_N8     &kp KP_N9        &kp COMMA
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        XXX           XXX           XXX           XXX           XXX               &kp ENTER     &kp KP_N4      &kp KP_N5     &kp KP_N6        &kp KP_DOT
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        XXX           XXX           XXX           XXX           XXX               &kp KP_N0     &kp KP_N1      &kp KP_N2     &kp KP_N3        &kp SLASH
// ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                &kr_to NAV 0    MO(NUM)          &mt KP_NUMLOCK BKSP &kp SPACE
//                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
      >;
    };

    func_layer {
      label = "FUNC";
      bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
        &to QWER      XXX           XXX           XXX           XXX               &kp F10       &kp F7         &kp F8        &kp F9        XXX
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        XXX           XXX           XXX           XXX           XXX               &kp F11       &kp F4         &kp F5        &kp F6        XXX
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        XXX           XXX           XXX           XXX           XXX               &kp F12       &kp F1         &kp F2        &kp F3        XXX
// ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                &kr_to NAV 0    MO(NUM)          &kp BKSP      &kp SPACE
//                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
      >;
    };

    qwerty_layer {
        label = "QWER";
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
        &kp Q         &kp W         &kp E         &kp R         &kp T             &kp Y         &kp U         &kp I         &kp O         &kp P
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &kp A         &kp S         &kp D         &kp F         &kp G             &kp H         &kp J         &kp K         &kp L         &kp SEMI
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &kp Z         &kp X         &kp C         &kp V         &kp B             &kp N         &kp M         &kp COMMA    &kp DOT        &kp SLASH
// ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                  &if_lctrl     &skq LSHIFT       &dw_bksp LCTRL 0      &kp SPACE
//                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
      >;
    };
      >;
    };
  };
};

